以滚动事件时间窗口为例
    1、窗口怎么划分？开始时间、结束时间？
        -开始时间 = timestamp - (timestamp - offset + windowSize) % windowSize
            对 窗口长度 取整数倍（以1970年1月1日0点 为基准 => 因为是时间戳）
            并不是以第一条数据 作为窗口的 起始点
        -结束时间 = 开始时间 + 窗口长度

    源码分析：
    TumblingEventTimeWindows类中
    -68 assignWindows()
    	//获取窗口的起始时间，并不是以第一条数据作为窗口的起始点
    	//这个算法，相当于，对窗口长度取整数倍（以1970年1月1日0点 为基准 => 因为是时间戳）
        *74 long start = TimeWindow.getWindowStartWithOffset(timestamp, (globalOffset + staggerOffset) % size, size);
            例如：窗口大小为10，时间时间分别为1,7,12得到的起始时间
            => timestamp - (timestamp - offset + windowSize) % windowSize
            => 1 - (1 -0 + 10) % 10  =>  start = 0s
            => 7 - (7 -0 + 10) % 10  =>  start = 0s
            => 12 - (12 - 0 + 10) % 10 => start = 10s
		
		//创建TimeWindow对象，起始时间，结束时间 end = start + 窗口大小
		//每来一条数据，都会new一个TimeWindow窗口对象,并将窗口对象放入一个SingletonList，
		SingletonList会调用contains方法判断是否包含对象，如果包含就不会向集合中添加。contains方法底层是通过equals进行判断的，所以要求Timewindos需要重写equals方法。
		*75 return Collections.singletonList(new TimeWindow(start, start + size));


    2、窗口为什么是左闭右开？
        属于窗口的最大时间戳： maxTimestamp = end - 1ms

		源码分析：
		TimeWindow类中
		    //获取属于本窗口的 最大时间戳 Gets the largest timestamp that still belongs to this window.
		    //[0,10) => 属于本窗口的最大时间戳为， 10s -1ms = 9999ms => 所以10s这条数据，不属于本窗口，所以是开区间
			-85 public long maxTimestamp() {
		        return end - 1;
		    } 

    3、窗口什么时候触发计算？
        watermark >= 窗口的最大时间戳 

        比如，[0,10)的窗口，当 watermark >= 10s - 1ms = 9999ms时触发
        	
            => 此时，watermark = 事件时间 - 等待3s - 1ms => 事件时间 = 13s时触发

		源码分析：
		TumblingEventTimeWindows类中
			//获取默认触发器
			-84 getDefaultTrigger 
				*return EventTimeTrigger.create();
					> return new EventTimeTrigger();
						~37 onElement
		    				if (window.maxTimestamp() <= ctx.getCurrentWatermark()) {
								// if the watermark is already past the window fire immediately
								return TriggerResult.FIRE;
							} else {
								ctx.registerEventTimeTimer(window.maxTimestamp());
								return TriggerResult.CONTINUE;
							}

    4、窗口的生命周期
    	-什么时候创建的窗口
        	属于本窗口的第一条数据来的时候，new Timewindow对象，同一个窗口的数据之后会创建多个对象，但是只会有放到SingletonList集合中的一个窗口对象进行操作

    	-什么时候关闭窗口
        窗口关闭时间 = 窗口最大时间戳 + allowedLateness
        注意：如果 allowedLateness = 0（不设置），那么触发和关窗的时间一样

        源码分析
        WindowOperator类中
        	-292 processElement()
        		*registerCleanupTimer(actualWindow);
        			>604 triggerContext.registerEventTimeTimer(cleanupTime);
        				~639 cleanupTime()
        					long cleanupTime = window.maxTimestamp() + allowedLateness;
							return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE;
							窗口关闭时间 = 窗口最大时间戳 + allowedLateness

        	-428 onEventTime()
        		//定时器到期  清除所有状态
        		*463 clearAllState(triggerContext.window, windowState, mergingWindows);			
        			>535 mergingWindows.retireWindow(window);