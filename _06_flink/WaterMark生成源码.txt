Flink内置了两种Watermark的生成策略
	-单调递增
		.<WaterSensor>forMonotonousTimestamps()
	-允许固定时间的延迟
		.<WaterSensor>forBoundedOutOfOrderness(Duration.ofSeconds(3))

	-其实单调递增就是允许延迟的时间为0，它们底层调用的是相同的方法

	-底层BoundedOutOfOrdernessWatermarks类中源码 
	
	50 new BoundedOutOfOrdernessWatermarks(延迟时间){
		//将固定的延迟时间转换为毫秒
		this.outOfOrdernessMillis = maxOutOfOrderness.toMillis();

		//初始化maxTimestamp  ，maxTimestamp指的是流中最大的事件时间，可以保证watermark的递增，不会减小
		this.maxTimestamp = Long.MIN_VALUE + outOfOrdernessMillis + 1;
	}
		
	63 //每个事件过来的时候，会将当前事件时间和maxTimestamp对比取最大值	
	public void onEvent(T event, long eventTimestamp, WatermarkOutput output) {
		maxTimestamp = Math.max(maxTimestamp, eventTimestamp);
	}	


	68 //发射Watermark
	public void onPeriodicEmit(WatermarkOutput output) {
		//创建Watermark    参数中Watermark时间 = 最大事件时间 - 固定延迟时间 - 1 毫秒
		output.emitWatermark(new Watermark(maxTimestamp - outOfOrdernessMillis - 1));
	}

	对于Watermark的生成，如果实现了onPeriodicEmit方法，那么是周期性发射；如果没有实现该方法，那么每过来一条数据，那么发送一次Watermark。
	内置的两个Watermark生成器都是周期性发生，默认是200，在ExecutionConfig类中定义autoWatermarkInterval=200
	一般不需要修改，保持在ms级别，如果改，可以通过env.getConfig().setAutoWatermarkInterval(500)设置



1.1	Watermark总结
1.1.1	Watermark概念
	衡量事件时间的进展
	是一个特殊的时间戳， 生成之后，随着流的流动而向后传递
	用来处理数据乱序 的问题
	触发窗口等的计算、关闭
	单调递增的 （时间不能倒退）
	Flink认为，小于watermark时间戳的数据处理完了，不应该再出现
1.1.2	Watermark生成方式
	周期性：发射watermark定义在 onPeriodicEmit()方法里，默认200ms
	间歇性：发射watermark定义在 onEvent()方法里，来一条数据执行一次
1.1.3	Watermark代码指定
官方提供两个写法，都是基于周期性的：
assignTimestampsAndWatermarks(
               WatermarkStrategy
                       .<T>forMonotonousTimestamps()  // 升序
                       .withTimestampAssigner()     // 指定 ET
                       )
assignTimestampsAndWatermarks(
               WatermarkStrategy
                       .<T>forBoundedOutOfOrderness(Duration)   // 乱序
                       .withTimestampAssigner()     // 指定 ET
                       )
1.1.4	Watermark多并行度下的传递
	一对多 => 广播
	多对一 =>以最小的为准， 类比木桶原理
	多对多 => 上面两个的结合
1.1.5	处理迟到数据
	窗口允许迟到（关窗之前的迟到数据）
		当 wm >= 窗口最大时间戳时，会触发，但是不会关窗
		当窗口最大时间戳 + 允许迟到时间 >= wm >= 窗口最大时间戳, 每来一条迟到数据，都会进入窗口，触发
		当 wm >= 窗口最大时间戳 + 允许迟到时间 ， 会关窗， 迟到数据不再进入窗口，不会再触发
	侧输出流（关窗之后的迟到数据）
		1） outputtag，如果要用匿名内部类的写法： new OutputTag<泛型>("名字"){}
		2） 从主流里面获取
